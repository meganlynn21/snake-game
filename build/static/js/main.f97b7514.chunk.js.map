{"version":3,"sources":["audio/gameOver.mp3","audio/success.mp3","Board/Board.jsx","lib/utils.js","img/snake.png","audio/start.wav","pages/StartMenu.js","img/gameOverImg.jpg","pages/GameOver.js","img/youwinImg.jpg","pages/Win.js","App.js","index.js"],"names":["LinkedListNode","value","this","next","LinkedList","node","head","tail","Direction","getStartingSnakeLLValue","board","rowSize","length","colSize","startingRow","Math","round","startingCol","row","col","cell","createBoard","BOARD_SIZE","counter","currentRow","push","getCoordsInDirection","coords","direction","isOutOfBounds","getDirectionFromKey","key","getNextNodeDirection","currentDirection","currentCol","nextRow","nextCol","getGrowthNodeCoords","snakeTail","tailNextNodeDirection","growthDirection","getOppositeDirection","currentTailCoords","getCellClassName","cellValue","foodCell","foodShouldReverseDirection","snakeCells","className","has","Board","navigation","useNavigate","useSound","gameOver","play","success","play2","useState","score","setScore","snake","setSnake","Set","setSnakeCells","setFoodCell","setDirection","setFoodShouldReverseDirection","useEffect","window","addEventListener","e","handleKeydown","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","moveSnake","newDirection","size","currentHeadCoords","nextHeadCoords","resetGame","HandleGameOver","nextHeadCell","newHead","currentHead","newSnakeCells","delete","add","growSnake","reverseSnake","handleFoodConsumption","growthNodeCoords","newTailCell","newTail","currentTail","previousNode","currentNode","nextNode","reverseLinkedList","snakeHead","nextFoodCell","min","max","floor","random","nextFoodShouldReverseDirection","winGame","snakeLLStartingValue","map","rowIdx","cellIdx","StartMenu","navigate","start","width","src","alt","onClick","event","GameOver","gameOverImg","class","Win","youWinImg","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f97b7514.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/gameOver.70bcf1d6.mp3\";","export default __webpack_public_path__ + \"static/media/success.37b45d4b.mp3\";","import React, {useEffect, useState } from 'react';\nimport {\n  randomIntFromInterval,\n  reverseLinkedList,\n  useInterval,\n} from '../lib/utils.js';\nimport useSound from 'use-sound';\nimport './Board.css';\nimport {useNavigate} from 'react-router-dom';\nimport gameOver from '../audio/gameOver.mp3';\nimport success from '../audio/success.mp3'\n\nclass LinkedListNode {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nclass LinkedList {\n  constructor(value) {\n    const node = new LinkedListNode(value);\n    this.head = node;\n    this.tail = node;\n  }\n}\n\nconst Direction = {\n  UP: 'UP',\n  RIGHT: 'RIGHT',\n  DOWN: 'DOWN',\n  LEFT: 'LEFT',\n};\n\nconst BOARD_SIZE = 15;\nconst PROBABILITY_OF_DIRECTION_REVERSAL_FOOD = 0.3;\n\nconst getStartingSnakeLLValue = board => {\n  const rowSize = board.length;\n  const colSize = board[0].length;\n  const startingRow = Math.round(rowSize / 3);\n  const startingCol = Math.round(colSize / 3);\n  const startingCell = board[startingRow][startingCol];\n  return {\n    row: startingRow,\n    col: startingCol,\n    cell: startingCell,\n  };\n};\n\nconst Board = () => {\n  const navigation = useNavigate();\n  const [play] = useSound(gameOver);\n  const [play2] = useSound(success);\n  const [score, setScore] = useState(0);\n  const [board, setBoard] = useState(createBoard(BOARD_SIZE));\n  const [snake, setSnake] = useState(\n    new LinkedList(getStartingSnakeLLValue(board)),\n  );\n  const [snakeCells, setSnakeCells] = useState(\n    new Set([snake.head.value.cell]),\n  );\n  // Set the starting food cell 5 cells away from the starting snake cell.\n  const [foodCell, setFoodCell] = useState(snake.head.value.cell + 5);\n  const [direction, setDirection] = useState(Direction.RIGHT);\n  const [foodShouldReverseDirection, setFoodShouldReverseDirection] = useState(\n    false,\n  );\n\n  useEffect(() => {\n    window.addEventListener('keydown', e => {\n      handleKeydown(e);\n    });\n  }, );\n\n  // `useInterval` is needed; you can't naively do `setInterval` in the\n  // `useEffect` above.\n  useInterval(() => {\n    moveSnake();\n  }, 200);\n\n  const handleKeydown = e => {\n    const newDirection = getDirectionFromKey(e.key);\n    const isValidDirection = newDirection !== '';\n    if (!isValidDirection) return;\n    const snakeWillRunIntoItself =\n      getOppositeDirection(newDirection) === direction && snakeCells.size > 1;\n    // Note: this functionality is currently broken, for the same reason that\n    // `useInterval` is needed. Specifically, the `direction` and `snakeCells`\n    // will currently never reflect their \"latest version\" when `handleKeydown`\n    // is called. \n    if (snakeWillRunIntoItself) return;\n    setDirection(newDirection);\n  };\n\n  const moveSnake = () => {\n    const currentHeadCoords = {\n      row: snake.head.value.row,\n      col: snake.head.value.col,\n    };\n\n    const nextHeadCoords = getCoordsInDirection(currentHeadCoords, direction);\n    if (isOutOfBounds(nextHeadCoords, board)) {\n      resetGame();\n      play()\n      HandleGameOver();\n      return;\n    }\n    const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\n    if (snakeCells.has(nextHeadCell)) {\n      resetGame();\n      play()\n      HandleGameOver();\n      return;\n    }\n\n    const newHead = new LinkedListNode({\n      row: nextHeadCoords.row,\n      col: nextHeadCoords.col,\n      cell: nextHeadCell,\n    });\n    const currentHead = snake.head;\n    snake.head = newHead;\n    currentHead.next = newHead;\n\n    const newSnakeCells = new Set(snakeCells);\n    newSnakeCells.delete(snake.tail.value.cell);\n    newSnakeCells.add(nextHeadCell);\n\n    snake.tail = snake.tail.next;\n    if (snake.tail === null) snake.tail = snake.head;\n\n    const foodConsumed = nextHeadCell === foodCell;\n    if (foodConsumed) {\n      // This function mutates newSnakeCells.\n      growSnake(newSnakeCells);\n      if (foodShouldReverseDirection) reverseSnake();\n      handleFoodConsumption(newSnakeCells);\n    }\n\n    setSnakeCells(newSnakeCells);\n  };\n\n  // This function mutates newSnakeCells.\n  const growSnake = newSnakeCells => {\n    const growthNodeCoords = getGrowthNodeCoords(snake.tail, direction);\n    if (isOutOfBounds(growthNodeCoords, board)) {\n      // Snake is positioned such that it can't grow; don't do anything.\n      return;\n    }\n    const newTailCell = board[growthNodeCoords.row][growthNodeCoords.col];\n    const newTail = new LinkedListNode({\n      row: growthNodeCoords.row,\n      col: growthNodeCoords.col,\n      cell: newTailCell,\n    });\n    const currentTail = snake.tail;\n    snake.tail = newTail;\n    snake.tail.next = currentTail;\n\n    newSnakeCells.add(newTailCell);\n  };\n\n  const reverseSnake = () => {\n    const tailNextNodeDirection = getNextNodeDirection(snake.tail, direction);\n    const newDirection = getOppositeDirection(tailNextNodeDirection);\n    setDirection(newDirection);\n\n    // The tail of the snake is really the head of the linked list, which\n    // is why we have to pass the snake's tail to `reverseLinkedList`.\n    reverseLinkedList(snake.tail);\n    const snakeHead = snake.head;\n    snake.head = snake.tail;\n    snake.tail = snakeHead;\n  };\n\n  const handleFoodConsumption = newSnakeCells => {\n    const maxPossibleCellValue = BOARD_SIZE * BOARD_SIZE;\n    let nextFoodCell;\n    // In practice, this will never be a time-consuming operation. Even\n    // in the extreme scenario where a snake is so big that it takes up 90%\n    // of the board (nearly impossible), there would be a 10% chance of generating\n    // a valid new food cell--so an average of 10 operations: trivial.\n    while (true) {\n      nextFoodCell = randomIntFromInterval(1, maxPossibleCellValue);\n      if (newSnakeCells.has(nextFoodCell) || foodCell === nextFoodCell)\n        continue;\n      break;\n    }\n\n    const nextFoodShouldReverseDirection =\n      Math.random() < PROBABILITY_OF_DIRECTION_REVERSAL_FOOD;\n\n    setFoodCell(nextFoodCell);\n    setFoodShouldReverseDirection(nextFoodShouldReverseDirection);\n    if(score >= 9) {\n      play2()\n      winGame()\n    }\n    else{\n      setScore(score + 1);\n    }\n\n  };\n\n  const HandleGameOver = () => {\n    return navigation('gameover');\n  }\n  \n  const resetGame = () => {\n    play()\n    setScore(0);\n    const snakeLLStartingValue = getStartingSnakeLLValue(board);\n    setSnake(new LinkedList(snakeLLStartingValue));\n    setFoodCell(snakeLLStartingValue.cell + 5);\n    setSnakeCells(new Set([snakeLLStartingValue.cell]));\n    setDirection(Direction.RIGHT);\n  };\n\n  const winGame = () => {\n      return navigation('win')\n  }\n\n  return (\n    <>\n      <h1>Score: {score}</h1>\n      <div className=\"board\">\n        {board.map((row, rowIdx) => (\n          <div key={rowIdx} className=\"row\">\n            {row.map((cellValue, cellIdx) => {\n              const className = getCellClassName(\n                cellValue,\n                foodCell,\n                foodShouldReverseDirection,\n                snakeCells,\n              );\n              return <div key={cellIdx} className={className}></div>;\n            })}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nconst createBoard = BOARD_SIZE => {\n  let counter = 1;\n  const board = [];\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const currentRow = [];\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      currentRow.push(counter++);\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\n\nconst getCoordsInDirection = (coords, direction) => {\n  if (direction === Direction.UP) {\n    return {\n      row: coords.row - 1,\n      col: coords.col,\n    };\n  }\n  if (direction === Direction.RIGHT) {\n    return {\n      row: coords.row,\n      col: coords.col + 1,\n    };\n  }\n  if (direction === Direction.DOWN) {\n    return {\n      row: coords.row + 1,\n      col: coords.col,\n    };\n  }\n  if (direction === Direction.LEFT) {\n    return {\n      row: coords.row,\n      col: coords.col - 1,\n    };\n  }\n};\n\nconst isOutOfBounds = (coords, board) => {\n  const {row, col} = coords;\n  if (row < 0 || col < 0) return true;\n  if (row >= board.length || col >= board[0].length) return true;\n  return false;\n};\n\nconst getDirectionFromKey = key => {\n  if (key === 'ArrowUp') return Direction.UP;\n  if (key === 'ArrowRight') return Direction.RIGHT;\n  if (key === 'ArrowDown') return Direction.DOWN;\n  if (key === 'ArrowLeft') return Direction.LEFT;\n  return '';\n};\n\nconst getNextNodeDirection = (node, currentDirection) => {\n  if (node.next === null) return currentDirection;\n  const {row: currentRow, col: currentCol} = node.value;\n  const {row: nextRow, col: nextCol} = node.next.value;\n  if (nextRow === currentRow && nextCol === currentCol + 1) {\n    return Direction.RIGHT;\n  }\n  if (nextRow === currentRow && nextCol === currentCol - 1) {\n    return Direction.LEFT;\n  }\n  if (nextCol === currentCol && nextRow === currentRow + 1) {\n    return Direction.DOWN;\n  }\n  if (nextCol === currentCol && nextRow === currentRow - 1) {\n    return Direction.UP;\n  }\n  return '';\n};\n\nconst getGrowthNodeCoords = (snakeTail, currentDirection) => {\n  const tailNextNodeDirection = getNextNodeDirection(\n    snakeTail,\n    currentDirection,\n  );\n  const growthDirection = getOppositeDirection(tailNextNodeDirection);\n  const currentTailCoords = {\n    row: snakeTail.value.row,\n    col: snakeTail.value.col,\n  };\n  const growthNodeCoords = getCoordsInDirection(\n    currentTailCoords,\n    growthDirection,\n  );\n  return growthNodeCoords;\n};\n\nconst getOppositeDirection = direction => {\n  if (direction === Direction.UP) return Direction.DOWN;\n  if (direction === Direction.RIGHT) return Direction.LEFT;\n  if (direction === Direction.DOWN) return Direction.UP;\n  if (direction === Direction.LEFT) return Direction.RIGHT;\n};\n\nconst getCellClassName = (\n  cellValue,\n  foodCell,\n  foodShouldReverseDirection,\n  snakeCells,\n) => {\n  let className = 'cell';\n  if (cellValue === foodCell) {\n    if (foodShouldReverseDirection) {\n      className = 'cell cell-purple';\n    } else {\n      className = 'cell cell-red';\n    }\n  }\n  if (snakeCells.has(cellValue)) className = 'cell cell-green';\n\n  return className;\n};\n\n\nexport default Board;\n\n","import {useEffect, useRef} from 'react';\n\n// Copied from https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nexport function randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// Copied from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport function reverseLinkedList(head) {\n  let previousNode = null;\n  let currentNode = head;\n  while (currentNode !== null) {\n    const nextNode = currentNode.next;\n    currentNode.next = previousNode;\n    previousNode = currentNode;\n    currentNode = nextNode;\n  }\n  return previousNode;\n}\n","export default __webpack_public_path__ + \"static/media/snake.c8fbdca2.png\";","export default __webpack_public_path__ + \"static/media/start.ed193137.wav\";","import React from 'react';\r\nimport useSound from 'use-sound';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport snake from '../img/snake.png';\r\nimport start from '../audio/start.wav';\r\n\r\nexport function StartMenu() {\r\n  const navigate = useNavigate();\r\n  const [play] = useSound(start);\r\n  // buffers automatically when created\r\n  return (\r\n    <div id=\"container\">\r\n      <div id=\"snakeImg\">\r\n        <img width=\"400\" src={snake} alt=\"snake\" />\r\n      </div>\r\n      <div id=\"btn\">\r\n        <button\r\n          onClick={event => {\r\n            navigate('board');\r\n            play();\r\n          }}\r\n          className=\"massive ui inverted green button\">\r\n          START\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/gameOverImg.ef7c33b0.jpg\";","import React from 'react';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport gameOverImg from '../img/gameOverImg.jpg';\r\n\r\nexport function GameOver() {\r\n  const navigate = useNavigate();\r\n  // buffers automatically when created\r\n  return (\r\n    <>\r\n      <div id=\"game-over\">\r\n        <img width=\"400\" src={gameOverImg} alt=\"gameover\" />\r\n      </div>\r\n      <div id=\"container\">\r\n        <div id=\"btn\">\r\n          <button\r\n            onClick={event => {\r\n              navigate('/');\r\n            }}\r\n            class=\"massive ui inverted red button\">\r\n            RESET\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GameOver;\r\n","export default __webpack_public_path__ + \"static/media/youwinImg.db12b3c3.jpg\";","import React from 'react';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport youWinImg from '../img/youwinImg.jpg';\r\n\r\nexport function Win() {\r\n  const navigate = useNavigate();\r\n  // buffers automatically when created\r\n  return (\r\n    <>\r\n      <div id=\"youwin\">\r\n        <img width=\"400\" src={youWinImg} alt=\"gameover\" />\r\n      </div>\r\n      <div id=\"container\">\r\n        <div id=\"btn\">\r\n          <button\r\n            onClick={event => {\r\n              navigate('/');\r\n            }}\r\n            class=\"massive ui inverted green button\">\r\n            Play Again\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Win;\r\n","import Board from './Board/Board.jsx';\nimport './App.css';\nimport {Route, Routes} from 'react-router-dom';\nimport {StartMenu} from './pages/StartMenu';\nimport GameOver from './pages/GameOver.js';\nimport Win from './pages/Win.js';\n\nconst App = () => (\n  <div className=\"App\">\n    <>\n      <Routes>\n        <Route path=\"/\" element={<StartMenu />} />\n        <Route path=\"board\" element={<Board />} />\n        <Route path=\"board/gameover\" element={<GameOver />} />\n        <Route path=\"board/win\" element={<Win />} />\n      </Routes>\n    </>\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}